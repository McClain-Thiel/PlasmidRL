
# this is the yaml version of a function or variable we can reuse
x-common: &common
  build:
    context: .
    dockerfile: Dockerfile
  working_dir: /mcclain
  env_file:
    - .env
  volumes:
    - ./:/mcclain
  restart: unless-stopped
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: all
            capabilities: [gpu]

x-s3: &s3mount
  - /mnt/s3/phd-research-storage-1758274488:/s3:rw

services:
  # Interactive shell for debugging
  dev:
    <<: *common
    command: bash
    tty: true

  # TRL: GRPO training
  grpo-trl:
    <<: *common
    command: >
      bash -lc "
        uv sync --frozen && uv run python -m src.runners.grpo
      "
    environment:
      # W&B settings for this job
      - WANDB_ENTITY=mcclain
      - WANDB_PROJECT=plasmidrl-trl-grpo
      - WANDB_TAGS=["plasmid","rl","trl","grpo"]
      - WANDB_NOTES=TRL GRPO training on plasmid design
      # Single simple flag to optionally resume
      - RESUME=${RESUME:-false}

  # TRL: Evolution Strategies optimization
  es:
    <<: *common
    command: >
      bash -lc "
        uv sync --frozen && uv run python -m src.runners.es
      "
    environment:
      - WANDB_ENTITY=mcclain
      - WANDB_PROJECT=plasmidrl-trl-es
      - WANDB_TAGS=["plasmid","rl","trl","es"]
      - WANDB_NOTES=TRL Evolution Strategies optimization

  # VERL: PPO trainer
  verl-ppo:
    build:
      context: .
      dockerfile: docker/verl.Dockerfile
    working_dir: /mcclain
    volumes:
      - ./:/mcclain
      - ./config/verl_ppo.yaml:/opt/verl/verl/trainer/config/verl_ppo.yaml:ro
      - /mnt/s3/phd-research-storage-1758274488:/s3:rw
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - WANDB_ENTITY=mcclain
      - WANDB_PROJECT=plasmidrl-verl-ppo
      - WANDB_TAGS=["plasmid","rl","verl","ppo"]
      - WANDB_NOTES=VERL PPO trainer
      - HF_TOKEN=${HF_TOKEN}
      - WANDB_API_KEY=${WANDB_API_KEY}
    command: >
      bash -lc "
        echo 'Starting VERL PPO...' && python3 -m verl.trainer.main_ppo --config-name verl_ppo
      "
    

  # VERL: GRPO trainer
  verl-grpo:
    build:
      context: .
      dockerfile: docker/verl.Dockerfile
    working_dir: /mcclain
    volumes:
      - ./:/mcclain
      - ./config/verl_grpo.yaml:/opt/verl/verl/trainer/config/verl_grpo.yaml:ro
      - /mnt/s3/phd-research-storage-1758274488:/s3:rw
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - WANDB_ENTITY=mcclain
      - WANDB_PROJECT=plasmidrl-verl-grpo
      - WANDB_TAGS=["plasmid","rl","verl","grpo"]
      - WANDB_NOTES=VERL GRPO trainer
      - HF_TOKEN=${HF_TOKEN}
      - WANDB_API_KEY=${WANDB_API_KEY}
    command: >
      bash -lc "
        echo 'Starting VERL GRPO...' && python3 -m verl.trainer.main_ppo --config-name verl_grpo
      "
    
  infer:
    <<: *common
    command: >
      bash -lc "
        uv sync --frozen && uv run python -m src.runners.generate_samples
      "

  # Optional: evaluation CLI if present
  eval:
    <<: *common
    command: >
      bash -lc "uv sync --frozen && uv run -m src.cli eval"
    environment:
      - WANDB_ENTITY=mcclain
      - WANDB_PROJECT=plasmidrl-eval
      - WANDB_TAGS=["eval"]
      - WANDB_NOTES=Evaluation job
