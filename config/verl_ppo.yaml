# configs/ppo_minimal.yaml
defaults:
  - ppo_trainer
  - _self_
data:
  tokenizer: null
  train_files: data/verl/train.parquet
  val_files: data/verl/test.parquet
  prompt_key: prompt
  max_prompt_length: 128
  max_response_length: 512         
  train_batch_size: 4 
  trust_remote_code: true
  return_raw_input_ids: true
  return_raw_chat: true
  return_full_prompt: false
  shuffle: true
  filter_overlong_prompts: false
  filter_overlong_prompts_workers: 1
  truncation: error
  custom_cls:
    path: null
    name: null

actor_rollout_ref:
  hybrid_engine: true
  model:
    path: McClain/plasmidgpt-addgene-gpt2
    trust_remote_code: true
    enable_gradient_checkpointing: false
    override_config:
      num_attention_heads: 12
      num_key_value_heads: 12
      attn_implementation: eager
    # Optional PEFT: uncomment to prefer LoRA on small GPUs
    # lora_rank: 16
    # lora_alpha: 32
    # lora_dropout: 0.05
  actor:
    strategy: fsdp
    ppo_mini_batch_size: 4  # match train_batch_size for single mini-batch
    ppo_micro_batch_size_per_gpu: 1
    use_dynamic_bsz: false
    ppo_max_token_len_per_gpu: 4096
    grad_clip: 1.0
    clip_ratio: 0.2
    entropy_coeff: 0.0
    use_kl_loss: true
    tis_imp_ratio_cap: -1
    use_torch_compile: true
    kl_loss_coef: 0.001
    kl_loss_type: low_var_kl
    ppo_epochs: 1
    optim:
      lr: 1.0e-5
      lr_warmup_steps_ratio: 0.0
      warmup_style: constant
      total_training_steps: -1
    fsdp_config:
      wrap_policy:
        min_num_params: 0
      param_offload: false
      optimizer_offload: false
  ref:
    log_prob_micro_batch_size_per_gpu: 4
  rollout:
    name: vllm
    do_sample: true
    top_p: 0.95
    temperature: 0.9
    n: 32
    tensor_model_parallel_size: 1
    enforce_eager: true
    free_cache_engine: false
    gpu_memory_utilization: 0.6
    max_num_batched_tokens: 256
    max_num_seqs: 32
    enable_chunked_prefill: false
    response_length: ${data.max_response_length}
    log_prob_micro_batch_size_per_gpu: 4
    calculate_log_probs: false
    val_kwargs:
      do_sample: false
      temperature: 0.0
      n: 1

critic:
  model:
    path: McClain/plasmidgpt-addgene-gpt2
    trust_remote_code: true
    fsdp_config:
      wrap_policy:
        min_num_params: 0
      param_offload: false
    override_config:
      num_attention_heads: 12
      num_key_value_heads: 12
      attn_implementation: eager
  optim:
    lr: 5.0e-5
  ppo_micro_batch_size_per_gpu: 1
  enable: false

reward_model:
  enable: false     # using your custom function instead

custom_reward_function:
  path: src/rewards/verl_reward.py
  name: get_plasmid_reward

algorithm:
  gamma: 1.0
  lam: 1.0
  adv_estimator: grpo
  use_kl_in_reward: false
  kl_penalty: kl
  kl_ctrl:
    type: fixed
    kl_coef: 0.001
    horizon: 10000
    target_kl: 0.1

trainer:
  total_epochs: 10  # more epochs since we have limited data diversity
  project_name: verl-ppo
  experiment_name: minimal
  logger: ['console', 'wandb']
  log_val_generations: 0
  nnodes: 1
  n_gpus_per_node: 1
  save_freq: 50
  val_before_train: false
  test_freq: 50
  critic_warmup: 0
  default_hdfs_dir: null
  default_local_dir: checkpoints/${trainer.project_name}/${trainer.experiment_name}
  resume_mode: auto
  resume_from_path: null
  remove_previous_ckpt_in_save: false
  del_local_ckpt_after_load: false
  ray_wait_register_center_timeout: 300
  wandb:
    entity: mcclain
    project: verl-ppo
    name: plasmid-verl-ppo
    tags: ['plasmid', 'verl', 'ppo', 'rl']
    notes: 'VERL PPO training for plasmid design optimization'
